import numpy as np

data=np.loadtxt('data.csv',delimiter=",")
x=data[:,0]
y=data[:,1]
x.shape
from sklearn import model_selection
x_train,x_test,y_train,y_test=model_selection.train_test_split(x,y,test_size=0.3)
x_train.shape


def fit(x_train,y_train):
    num=(x_train*y_train).mean()-x_train.mean()*y_train.mean()
    den=((x_train**2).mean()-x_train.mean()**2)
    m=num/den
    c=(y_train.mean()-m*x_train.mean())
    return m,c
    
    
def predict(x,m,c):
    return m*x+c
    
    
def COD(y_pred,y_true):
    u=((y_true-y_pred)**2).sum()
    v=((y_true-y_true.mean())**2).sum()
    return 1-u/v
    
    
def cost(x,y,m,c):
    return ((y-m*x-c)**2).mean()
    
m,c=fit(x_train,y_train)
print(m,c)
y_test_pred = predict(x_test,m,c)
print("Test Score: ",COD(y_test_pred,y_test))

y_train_pred=predict(x_train,m,c)

print("Train Score: ",COD(y_train_pred,y_train))
print("Cost on training data ",cost(x_train,y_train,m,c))
#inbuild linear regression for same data
from sklearn.linear_model import LinearRegression
x_train=x_train.reshape(-1,1)
x_test=x_test.reshape(-1,1)
alg=LinearRegression()
alg.fit(x_train,y_train)
m=alg.coef_[0]

c=alg.intercept_
print(m,c)
test_score=alg.score(x_test,y_test)
print("Test Score: ",test_score)
train_score=alg.score(x_train,y_train)
print("Train Score: ",train_score)
